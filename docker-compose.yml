# version: '1'

services:
  nginx:
    build:
      context: ./services/nginx
      dockerfile: Dockerfile
    image: nginx-img:dev
    container_name: nginx-cont
    ports:
      - "443:443"
    # depends_on:
    #   - frontend
    env_file: .env
    networks:
      - frontend-network
    restart: always
    volumes:
      - frontend-data:/app/frontend

  frontend:
    build:
      context: ./services/frontend
      dockerfile: Dockerfile
    image: frontend-img:dev
    container_name: frontend-cont
    ports:
      - "3000:3000"
    env_file: .env
    networks:
      - frontend-network
    restart: always
    # depends_on:
    #   - backend
    volumes:
      - frontend-data:/app/frontend

  backend:
    build:
      context: ./services/backend
      dockerfile: Dockerfile
    image: backend-img:dev
    container_name: backend-cont
    ports:
      - "8000:8000"
    env_file: .env
    restart: always
    depends_on:
      database:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    # volumes:
    #   - insert backend volume here!

  database:
    build:
      context: ./services/database
      dockerfile: Dockerfile
    image: database-img:dev
    container_name: database-cont
    ports:
      - "5432:5432"
    env_file: .env
    restart: always
    networks:
      - backend-network
    volumes:
      - database-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 3s
      timeout: 15s
      retries: 10

volumes:
  frontend-data:
    name: frontend-data
  database-data:
    name: database-data
    # driver: local
    # driver_opts:
    #   type: none
    #   device: /home/ttikanoj/data/database-data
    #   o: bind

networks:
  frontend-network:
    name: frontend-network
  backend-network:
    name: backend-network
