services:
  frontend:
    build:
      context: ./srcs/frontend
      dockerfile: Dockerfile
    image: frontend-img:dev
    container_name: frontend_c
    ports:
      - "443:443"
    env_file: .env
    networks:
      - frontend-network
      - backend-network  # Add frontend service to backend network
    restart: always
    volumes:
      - ./srcs/frontend/srcs/:/var/html/www:ro
    depends_on:
      - transcendence

  transcendence:
    build:
      context: ./srcs/backend/transcendence
      dockerfile: Dockerfile
    image: transcendence-img:dev
    container_name: transcendence_c
    expose:
      - "8000:8000"
    env_file: .env
    restart: always
    networks:
      - frontend-network
      - backend-network
    volumes:
      - ./srcs/backend/transcendence/srcs:/transcendence:ro
      - ./srcs/backend/transcendence/srcs/app/migrations:/transcendence/app/migrations:rw
    depends_on:
      database:
        condition: service_healthy
        
  pong:
    build:
      context: ./srcs/backend/pong
      dockerfile: Dockerfile
    image: pong_img:dev
    container_name: pong_c
    hostname: pong
    ports:
      - "8080:8080"
    env_file: .env
    restart: always
    networks:
      - frontend-network
      - backend-network  # Add frontend service to backend network

  database:
    build:
      context: ./srcs/backend/database
      dockerfile: Dockerfile
    image: database-img:dev
    container_name: database_c
    expose:
      - "5432:5432"
    env_file: .env
    restart: always
    networks:
      - backend-network
    volumes:
      - database-data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 3s
      timeout: 15s
      retries: 10

volumes:
  database-data:
    name: database-data

networks:
  frontend-network:
    name: frontend-network
  backend-network:
    name: backend-network
