"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
key_env = os.environ.get("DJANGO_SECRET_KEY")
SECRET_KEY = key_env if key_env else get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'http://localhost', 'https://localhost', 'transcendence', 'pong', 'https://c1r5p9']
CSRF_TRUSTED_ORIGINS = ['https://localhost', 'http://pong', 'https://c1r5p9']
# Application definition
INSTALLED_APPS = [
    'channels',
    'app',
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
	'pong',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'transcendence.cors_middleware.CorsMiddleware',
    'transcendence.cors_middleware.UpdateLastSeenMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'transcendence.cors_middleware.NextParamMiddleware',
]

ROOT_URLCONF = 'transcendence.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

#add!
ASGI_APPLICATION = 'transcendence.asgi.application'
WSGI_APPLICATION = 'transcendence.wsgi.application'

LOGIN_URL = '/app/login'

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_SAMESITE = 'None' #Remove this for CORS
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SAMESITE = 'Lax' # Might have to be removed once we have templates
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_AGE = 90 * 60 # == 1h30min
SESSION_SAVE_EVERY_REQUEST = True
# added trying to get form submission to work from templates
# CSRF_HEADER_NAME = "HTTP_X_CSRFTOKEN"  # The header name used by Nginx
# SESSION_COOKIE_DOMAIN = None
# CSRF_COOKIE_DOMAIN = None

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': 'database',
        'PORT': 5432
    }
}

# Add custom model for auth app
AUTH_USER_MODEL = 'app.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Media storage settings for static files
# https://docs.djangoproject.com/en/5.0/ref/settings/#std-setting-MEDIA_ROOT:~:text=BrokenLinkEmailsMiddleware%20is%20enabled.-,MEDIA_ROOT,-%C2%B6

# Absolute filesystem path to the directory that will hold user-uploaded files.
MEDIA_ROOT = BASE_DIR/'media_files'

# URL that handles the media served from
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add logging config
# Usage:
# import logging
# logger = logging.getLogger(__name__)
# logger.debug('This is a debug message')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',
    },
}

# Set up possible project-wide defines here
# Example:
# PROJECT_NAME = 'PongChamps'
# Remember!! from django.conf import settings
